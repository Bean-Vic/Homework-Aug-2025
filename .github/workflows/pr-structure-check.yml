name: PR Structure Check
on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  structure:
    name: PR Structure Check
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Check PR structure and note.md
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request || {};
            const repo = context.repo;
            const title = pr.title || "";
            const headSha = pr.head && pr.head.sha ? pr.head.sha : "";
            const MARK = "<!-- pr-structure-lint -->";

            async function upsert(lines){
              const body = [MARK].concat(lines).join("\n");
              const resp = await github.rest.issues.listComments({ owner: repo.owner, repo: repo.repo, issue_number: pr.number, per_page: 100 });
              const ex = (resp.data || []).find(c => c.body && c.body.indexOf(MARK) !== -1);
              if (ex) { await github.rest.issues.updateComment({ owner: repo.owner, repo: repo.repo, comment_id: ex.id, body }); }
              else   { await github.rest.issues.createComment({ owner: repo.owner, repo: repo.repo, issue_number: pr.number, body }); }
            }
            async function cleanup(){
              const resp = await github.rest.issues.listComments({ owner: repo.owner, repo: repo.repo, issue_number: pr.number, per_page: 100 });
              const ex = (resp.data || []).find(c => c.body && c.body.indexOf(MARK) !== -1);
              if (ex) { await github.rest.issues.deleteComment({ owner: repo.owner, repo: repo.repo, comment_id: ex.id }); }
            }
            async function safeUpsert(lines){ try{ await upsert(lines); }catch(e){ core.warning("Cannot comment: " + (e.message||e)); } }
            async function safeCleanup(){ try{ await cleanup(); }catch(e){} }
            async function fail(lines){ await safeUpsert(lines); core.setFailed("PR structure invalid"); }

            // 从标题解析整数作业号（0 或正整数，默认不允许前导 0）
            const m = title.match(/HW(0|[1-9]\d*)/i);
            if (!m) {
              await fail([
                "### 🚫 无法解析作业号",
                "",
                "当前标题：`" + title + "`",
                "请先把标题改成 `HW{整数} - {Name}`（如 `HW0 - Bean`, `HW42 - Zoey`）。"
              ]);
              return;
            }
            const num = Number(m[1]);

            // 拉取 PR 文件列表
            const files = [];
            let page = 1;
            while (true) {
              const resp = await github.rest.pulls.listFiles({ owner: repo.owner, repo: repo.repo, pull_number: pr.number, per_page: 100, page });
              const data = resp.data || [];
              for (const it of data) files.push(it);
              if (data.length < 100) break;
              page += 1;
            }
            if (files.length === 0) {
              await fail([
                "### 🚫 未检测到任何文件改动",
                "",
                "请在 `HW" + num + "/{NAME_FOLDER}/` 下提交作业文件，并包含 `note.md`。"
              ]);
              return;
            }

            // 仅检查非删除改动
            const active = files.filter(f => ["added","modified","renamed","copied","changed"].indexOf(f.status||"") !== -1);

            const wrongHwFiles = [];         // 位于其他 HW 号目录
            const outsideHwFiles = [];       // 不在 HW{num}/ 前缀下
            const noNameFolderFiles = [];    // 在 HW{num}/ 下，但没有 {NAME_FOLDER}/ 这一级，如 HW{num}/note.md
            const folders = new Set();       // 统计出现过的 {NAME_FOLDER}
            const pathStartRe = new RegExp("^HW" + num + "/([^/]+)/");

            for (const f of active) {
              const p = f.filename || "";

              const oh = p.match(/^HW(\d+)\//i);
              if (oh && Number(oh[1]) !== num) { wrongHwFiles.push(p); continue; }

              if (p.indexOf("HW" + num + "/") !== 0) { outsideHwFiles.push(p); continue; }

              const mm = p.match(pathStartRe);
              if (!mm) { noNameFolderFiles.push(p); continue; }

              folders.add(mm[1]);
            }

            // 如果有任意一类违规，列出“全部违规文件”
            if (wrongHwFiles.length || outsideHwFiles.length || noNameFolderFiles.length) {
              const lines = [];
              lines.push("### 🚫 变更路径不符合规范");
              lines.push("");
              lines.push("标题中的作业号：`HW" + num + "`");
              lines.push("");

              if (wrongHwFiles.length) {
                lines.push("**出现在其他作业目录（应为 `HW" + num + "/...`）：" + " 共 " + wrongHwFiles.length + " 个**");
                for (const p of wrongHwFiles) lines.push("- `" + p + "`");
                lines.push("");
              }
              if (outsideHwFiles.length) {
                lines.push("**不在 `HW" + num + "/` 前缀下：" + " 共 " + outsideHwFiles.length + " 个**");
                for (const p of outsideHwFiles) lines.push("- `" + p + "`");
                lines.push("");
              }
              if (noNameFolderFiles.length) {
                lines.push("**缺少 `{NAME_FOLDER}` 这一级（形如 `HW" + num + "/note.md`）：共 " + noNameFolderFiles.length + " 个**");
                for (const p of noNameFolderFiles) lines.push("- `" + p + "`");
                lines.push("");
              }

              lines.push("**要求：** 所有改动文件必须位于 `HW" + num + "/{NAME_FOLDER}/**`。");
              lines.push("✅ 示例：`HW" + num + "/Bean/note.md`、`HW" + num + "/Bean/录音.mp4`");
              lines.push("❌ 示例：`HW" + num + "/note.md`、`HW" + num + "/question.js`、`HW" + (num+1) + "/...`");
              await fail(lines);
              return;
            }

            // 到这里说明所有文件都在 HW{num}/{NAME_FOLDER}/** 下
            if (folders.size !== 1) {
              const lines = [];
              lines.push("### 🚫 检测到多个 {NAME_FOLDER}");
              lines.push("");
              lines.push("本次 PR 只能有一个作业文件夹，当前检测到：" + "`" + Array.from(folders).join("`, `") + "`");
              lines.push("");
              lines.push("**要求：** 所有改动应位于 `HW" + num + "/{唯一的NAME_FOLDER}/` 下。");
              await fail(lines);
              return;
            }

            const folder = Array.from(folders)[0];

            // 必须存在 note.md（按 PR head 提交检查）
            try {
              await github.rest.repos.getContent({
                owner: repo.owner, repo: repo.repo,
                path: "HW" + num + "/" + folder + "/note.md",
                ref: headSha
              });
            } catch (e) {
              await fail([
                "### 🚫 缺少必需文件 note.md",
                "",
                "未检测到：`HW" + num + "/" + folder + "/note.md`（按当前 PR 头部提交）",
                "",
                "**要求：** 在你的作业文件夹中添加 `note.md`（区分大小写）。"
              ]);
              return;
            }

            await safeCleanup();
            core.info("✅ Structure OK: HW" + num + "/" + folder);
