name: PR Title & Folder Structure Check (PR)

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]

permissions:
  pull-requests: write   # 评论需要；fork PR 时即使写了也可能只有只读，代码已容错
  contents: read

jobs:
  lint:
    if: ${{ !github.event.pull_request.draft }}  # 草稿要校验就删这一行
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR (title + folder + note.md)
        uses: actions/github-script@v7
        with:
          script: |
            // ---- context ----
            const pr = context.payload.pull_request;
            const repo = context.repo;
            const title = pr && pr.title ? pr.title : "";
            const headSha = pr && pr.head && pr.head.sha ? pr.head.sha : "";

            // ---- helpers: sticky comment upsert/cleanup (带权限容错) ----
            const MARK = "<!-- pr-hw-structure-lint -->";

            async function upsert(bodyLines) {
              const body = [MARK].concat(bodyLines).join("\n");
              const commentsResp = await github.rest.issues.listComments({
                owner: repo.owner, repo: repo.repo, issue_number: pr.number, per_page: 100
              });
              const existing = (commentsResp.data || []).find(c => c.body && c.body.indexOf(MARK) !== -1);
              if (existing) {
                await github.rest.issues.updateComment({
                  owner: repo.owner, repo: repo.repo, comment_id: existing.id, body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: repo.owner, repo: repo.repo, issue_number: pr.number, body
                });
              }
            }
            async function cleanup() {
              const commentsResp = await github.rest.issues.listComments({
                owner: repo.owner, repo: repo.repo, issue_number: pr.number, per_page: 100
              });
              const existing = (commentsResp.data || []).find(c => c.body && c.body.indexOf(MARK) !== -1);
              if (existing) {
                await github.rest.issues.deleteComment({
                  owner: repo.owner, repo: repo.repo, comment_id: existing.id
                });
              }
            }
            async function safeUpsert(lines) {
              try { await upsert(lines); }
              catch (e) { core.warning("No permission to write PR comment; skipping. " + (e.message || e)); }
            }
            async function safeCleanup() {
              try { await cleanup(); }
              catch (e) { /* ignore */ }
            }
            async function fail(lines) {
              await safeUpsert(lines);
              core.setFailed("PR title/folder structure check failed");
            }

            // ---- 1) title check ----
            const titleRe = /^HW(0|[1-9]|1[0-9]|20)\s*-\s*\S.*$/i; // case-insensitive
            if (!titleRe.test(title)) {
              await fail([
                "### 🚫 PR 标题格式错误",
                "",
                "你的标题：`" + title + "`",
                "",
                "**要求格式**：`HW{#} - {Name}`（大小写不敏感）",
                "- `#` 必须是 0..20 的整数",
                "- 中间要有连字符 `-`（两侧可有空格）",
                "- `{Name}` 至少包含一个非空白字符",
                "",
                "**正确示例**：",
                "- `HW0 - Vincent`",
                "- `HW3 - Zoey`",
                "- `HW20 - Performance tuning`",
                "",
                "**不合格示例**：",
                "- `hw3`（缺少连字符和名字）",
                "- `HW21 - test`（数字超出范围）",
                "- `HW3- `（缺少名字部分）"
              ]);
              return;
            }

            const numMatch = title.match(/HW(0|[1-9]|1[0-9]|20)/i);
            const num = numMatch ? Number(numMatch[1]) : NaN;

            // ---- 2) list PR files (paginate) ----
            const files = [];
            let page = 1;
            while (true) {
              const resp = await github.rest.pulls.listFiles({
                owner: repo.owner, repo: repo.repo, pull_number: pr.number, per_page: 100, page
              });
              const data = resp.data || [];
              for (const it of data) files.push(it);
              if (data.length < 100) break;
              page += 1;
            }
            if (files.length === 0) {
              await fail([
                "### 🚫 没有检测到任何文件改动",
                "",
                "请在 `HW" + num + "/{NAME_FOLDER}/` 下提交作业文件，并且包含 `note.md`。"
              ]);
              return;
            }

            // 只关心非删除改动
            const active = files.filter(f => {
              const st = f.status || "";
              return st === "added" || st === "modified" || st === "renamed" || st === "copied" || st === "changed";
            });

            // ---- 3) path checks ----
            const folders = new Set();
            let offending = null;
            let wrongHw = null;

            const pathStartRe = new RegExp("^HW" + num + "/([^/]+)/");

            for (const f of active) {
              const p = f.filename || "";

              // 其它作业号目录 → 失败
              const mOther = p.match(/^HW(\d+)\//i);
              if (mOther && Number(mOther[1]) !== num) { wrongHw = p; break; }

              if (p.indexOf("HW" + num + "/") !== 0) { offending = p; break; }
              const m = p.match(pathStartRe);
              if (!m) { offending = p; break; }
              folders.add(m[1]);
            }

            if (wrongHw) {
              await fail([
                "### 🚫 作业号不一致",
                "",
                "标题中的作业号：`HW" + num + "`",
                "但检测到其他目录：`" + wrongHw + "`",
                "",
                "**要求：** 只能改动 `HW" + num + "/{NAME_FOLDER}/` 下的文件。",
                "✅ 示例：`HW" + num + "/Vincent/note.md`"
              ]);
              return;
            }
            if (offending) {
              await fail([
                "### 🚫 变更路径不符合规范",
                "",
                "文件：`" + offending + "`",
                "",
                "**要求：** 所有改动文件必须位于 `HW" + num + "/{NAME_FOLDER}/` 目录下。",
                "✅ 正确示例：`HW" + num + "/Vincent/note.md`、`HW" + num + "/Vincent/录音.mp4`",
                "❌ 错误示例：`HW" + num + "/note.md`、`HW" + num + "/question.js`"
              ]);
              return;
            }
            if (folders.size !== 1) {
              await fail([
                "### 🚫 检测到多个 {NAME_FOLDER}",
                "",
                "当前检测到：`" + Array.from(folders).join("`, `") + "`",
                "",
                "**要求：** 每个 PR 只能提交一个作业文件夹。"
              ]);
              return;
            }

            const folder = Array.from(folders)[0];

            // ---- 4) note.md must exist at head SHA ----
            try {
              await github.rest.repos.getContent({
                owner: repo.owner, repo: repo.repo,
                path: "HW" + num + "/" + folder + "/note.md",
                ref: headSha
              });
            } catch (e) {
              await fail([
                "### 🚫 缺少必需文件 note.md",
                "",
                "未检测到：`HW" + num + "/" + folder + "/note.md`（按当前 PR 头部提交）",
                "",
                "**要求：** 在你的作业文件夹中添加 `note.md`（区分大小写）。"
              ]);
              return;
            }

            // ---- success ----
            await safeCleanup();
            core.info("OK: HW" + num + "/" + folder);
