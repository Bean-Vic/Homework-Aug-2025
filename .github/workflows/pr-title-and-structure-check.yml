name: PR Title & Folder Structure Check

on:
  pull_request_target:
    types: [opened, edited, synchronize, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  lint:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title || "";
            const repo = context.repo;
            const headSha = pr.head.sha;

            // 标题：HW{0..20} - {Name}（大小写不敏感）
            const titleRe = /^HW(0|[1-9]|1[0-9]|20)\s*-\s*\S.*$/i;

            // 固定锚点，避免刷屏
            const marker = '<!-- pr-hw-structure-lint -->';

            async function upsertComment(lines) {
              const body = [marker].concat(lines).join('\n');
              const { data: comments } = await github.rest.issues.listComments({
                owner: repo.owner, repo: repo.repo, issue_number: pr.number, per_page: 100,
              });
              const existing = comments.find(c => c.body && c.body.indexOf(marker) !== -1);
              if (existing) {
                await github.rest.issues.updateComment({
                  owner: repo.owner, repo: repo.repo, comment_id: existing.id, body,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: repo.owner, repo: repo.repo, issue_number: pr.number, body,
                });
              }
            }

            async function cleanupComment() {
              const { data: comments } = await github.rest.issues.listComments({
                owner: repo.owner, repo: repo.repo, issue_number: pr.number, per_page: 100,
              });
              const existing = comments.find(c => c.body && c.body.indexOf(marker) !== -1);
              if (existing) {
                await github.rest.issues.deleteComment({
                  owner: repo.owner, repo: repo.repo, comment_id: existing.id,
                });
              }
            }

            async function fail(lines) {
              await upsertComment(lines);
              core.setFailed('PR title/folder structure check failed');
            }

            // --- 1) 标题校验 ---
            if (!titleRe.test(title)) {
              await fail([
                '### 🚫 PR 标题格式错误',
                '',
                '你的标题：`' + title + '`',
                '',
                '**要求格式**：`HW{#} - {Nam
